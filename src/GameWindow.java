
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author shim_869637
 */
public class GameWindow extends javax.swing.JFrame {

    // Instance Variables
    Tile[][] grid;
    boolean gameOver = false;
    int bombz = 0;
    boolean gameWon = false;
    /**
     * Creates new form GameWindow
     */
    public GameWindow() {
        initComponents();
        
        initalizeGrid();
        jButton1.setIcon(new ImageIcon("smiley.png", "smily"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        stat_JPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        game_JPanel = new javax.swing.JPanel();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stat_JPanelLayout = new javax.swing.GroupLayout(stat_JPanel);
        stat_JPanel.setLayout(stat_JPanelLayout);
        stat_JPanelLayout.setHorizontalGroup(
            stat_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat_JPanelLayout.createSequentialGroup()
                .addContainerGap(338, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(338, Short.MAX_VALUE))
        );
        stat_JPanelLayout.setVerticalGroup(
            stat_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stat_JPanelLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout game_JPanelLayout = new javax.swing.GroupLayout(game_JPanel);
        game_JPanel.setLayout(game_JPanelLayout);
        game_JPanelLayout.setHorizontalGroup(
            game_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        game_JPanelLayout.setVerticalGroup(
            game_JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
        );

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Game Options");
        jMenuBar3.add(jMenu6);

        setJMenuBar(jMenuBar3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stat_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(game_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(stat_JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(game_JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        game_JPanel.removeAll();
        gameOver = false;
        gameWon = false;
        initalizeGrid();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameWindow().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel game_JPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JPanel stat_JPanel;
    // End of variables declaration//GEN-END:variables

    private void initalizeGrid() {
        
        // Set the size of the grid, and instantiate each Tile in grid
        gameOver = false;
        grid = new Tile[15][15];
        
        for (int r = 0; r < grid.length; r++){
            for (int c = 0; c < grid.length; c++){
                grid[r][c] = new Tile(c, r);
            }
        }
        
        // Generate the tiles in the grid
        game_JPanel.setLayout(new GridBagLayout());
        
        
        // Generate Constraintsfor the Layout Manager
        for (int r = 0; r < grid.length; r++){
            for (int c = 0; c < grid.length; c++){
                Tile square = grid[r][c];
                
                // Specifies the x, y coordinates of the grid
                GridBagConstraints constraints = new GridBagConstraints();
                constraints.gridx = r;
                constraints.gridy = c;
                constraints.weightx = 0;
                constraints.weighty = 0;
                
                // Add the tile to the panel with the constraints
                game_JPanel.add(square, constraints);        
                
                square.setIcon(new ImageIcon("blank.png", "blank"));
                jButton1.setIcon(new ImageIcon("smiley.png", "smily"));
                
                // Add a MouseListener annoymously, and override onClick Method
                square.addMouseListener(new MouseListener() {

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        mouseActionPerformed(e);
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {
                    if (gameOver){
                        if (gameWon){
                            jButton1.setIcon(new ImageIcon("smileyWin.png", "smily"));
                        }
                        else if (!gameWon){
                            jButton1.setIcon(new ImageIcon("smileyLose.png", "smily"));
                        }
                    }
                        else{
                            jButton1.setIcon(new ImageIcon("smileyPlay.png", "smily"));
                        }
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                    if (gameOver){
                        if (gameWon){
                            jButton1.setIcon(new ImageIcon("smileyWin.png", "smily"));
                        }
                        else if (!gameWon){
                            jButton1.setIcon(new ImageIcon("smileyLose.png", "smily"));
                        }
                    }
                        else{
                            jButton1.setIcon(new ImageIcon("smiley.png", "smily"));
                        }
                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                    }
                } );
                }
            }
        
        
         
        // Generate a random set of bombs
        // Bombs will be 5% of the total number of tiles
        
        for (int r = 0; r < grid.length; r++){
            for(int c = 0; c < grid.length; c++){
                if ((Math.random()) >= 0.9){
                    Tile bomb = grid[r][c];
                    bomb.setNumBombs(9);
                    bombz++;
                }
            }
        }

        // Calculate all of the numbers for the adjecent tile numbers for the tiles
        
        for (int r = 0; r < grid.length; r++){
            for(int c = 0; c < grid.length; c++){
                int count = 0;
                Tile square = grid[r][c];
                if (square.getNumBombs() != 9){
                    try{
                        if(grid[r-1][c-1].getNumBombs() == 9)count++;
                    } catch(Exception e){}
                    try{
                        if(grid[r-1][c].getNumBombs() == 9)count++;
                    } catch(Exception e){}
                    try{
                        if(grid[r][c-1].getNumBombs() == 9)count++;
                    } catch(Exception e){}
                    try{
                        if(grid[r+1][c-1].getNumBombs() == 9)count++;
                    } catch(Exception e){}
                    try{
                        if(grid[r-1][c+1].getNumBombs() == 9)count++;
                    } catch(Exception e){}
                    try{
                        if(grid[r+1][c+1].getNumBombs() == 9)count++;
                    } catch(Exception e){}
                    try{
                        if(grid[r+1][c].getNumBombs() == 9)count++;
                    } catch(Exception e){}
                    try{
                        if(grid[r][c+1].getNumBombs() == 9)count++;
                    } catch(Exception e){}
                    square.setNumBombs(count);
                }
            }
        }
    }
    
    private void mouseActionPerformed(MouseEvent e) {
        
        // Tile that mouse was clicked
        Tile square = (Tile) e.getSource();
        
        
        // Get the button clicked from the mouse
        // 0 - no button pressed
        // 1 - left mouse button
        // 2 - mouse wheel clicked
        // 3 - right mouse button
        
        int button = e.getButton();
        
        // Get the x/y coordinate in the grid
        int x = square.getGridx();
        int y = square.getGridy();
        
        if (!gameOver){
            if (button == 3){
                if(square.isUncovered() == false && square.isFlag() == false){
                    square.setIcon(new ImageIcon("flag.png", "flag"));
                    square.setFlag(true);
                }
                else if (square.isFlag() == true){
                    square.setFlag(false);
                    square.setIcon(new ImageIcon("blank.png", "blank"));
                }
                checkIfWon();
            }

            if (button == 1){
                if(square.isUncovered() == false && square.isFlag() == false){
                    checkForUncovered(square.getGridx(), square.getGridy());
                    checkIfWon();
                }
                

            }
            System.out.println(x + ":" + y + "," + button);
        }
        
        
    }
    
     private void checkForUncovered(int r, int c){
        try{Tile square = grid[r][c];
        if(square.isUncovered() == false && !gameOver){                
            try{
                if(grid[r][c].getNumBombs() == 0){
                    square.setIcon(new ImageIcon("uncovered.png", "uncovered"));
                    square.setUncovered(true);
                    checkForUncovered(r+1,c+1);
                    checkForUncovered(r+1,c);
                    checkForUncovered(r+1,c-1);
                    checkForUncovered(r,c+1);
                    checkForUncovered(r,c-1);
                    checkForUncovered(r-1,c+1);
                    checkForUncovered(r-1,c);
                    checkForUncovered(r-1,c-1);
                }
            }catch (Exception e){}
                try{if(grid[r][c].getNumBombs() == 1)square.setIcon(new ImageIcon("1.png", "1"));square.setUncovered(true);}catch (Exception e){}
                try{if(grid[r][c].getNumBombs() == 2)square.setIcon(new ImageIcon("2.png", "2"));square.setUncovered(true);}catch (Exception e){}
                try{if(grid[r][c].getNumBombs() == 3)square.setIcon(new ImageIcon("3.png", "3"));square.setUncovered(true);}catch (Exception e){}
                try{if(grid[r][c].getNumBombs() == 4)square.setIcon(new ImageIcon("4.png", "4"));square.setUncovered(true);}catch (Exception e){}
                try{if(grid[r][c].getNumBombs() == 5)square.setIcon(new ImageIcon("5.png", "5"));square.setUncovered(true);}catch (Exception e){}
                try{if(grid[r][c].getNumBombs() == 6)square.setIcon(new ImageIcon("6.png", "6"));square.setUncovered(true);}catch (Exception e){}
                try{if(grid[r][c].getNumBombs() == 7)square.setIcon(new ImageIcon("7.png", "7"));square.setUncovered(true);}catch (Exception e){}
                try{if(grid[r][c].getNumBombs() == 8)square.setIcon(new ImageIcon("8.png", "8"));square.setUncovered(true);}catch (Exception e){}
                try{
                    if(grid[r][c].getNumBombs() == 9){                 
                        gameOver = true;
                        jButton1.setIcon(new ImageIcon("smileyLose.png", "smily"));
                        for (int row = 0; row < grid.length; row++){
                            for(int col = 0; col < grid.length; col++){
                                Tile yo = grid[row][col];
                                if (yo.getNumBombs() == 9){
                                    yo.setIcon(new ImageIcon("bomb.png", "bomb"));
                                }
                            }
                        }
                        square.setIcon(new ImageIcon("exploded.png", "exploded"));
                    }
                }catch (Exception e){
                } 
            }
        }catch (Exception e){}
    }

    private void checkIfWon() {
        boolean win = true;
        for (int r = 0; r < grid.length; r++){
            for(int c = 0; c < grid.length; c++){
                Tile square = grid[r][c];
                if (square.isUncovered() == false &&  !(square.getNumBombs() == 9)){
                    win = false;
                }
            }
        }
        if (win){
            gameWon = true;
            for (int row = 0; row < grid.length; row++){
                for(int col = 0; col < grid.length; col++){
                    Tile yo = grid[row][col];
                    if (yo.getNumBombs() == 9){
                        yo.setIcon(new ImageIcon("flag.png", "flag"));
                    }
                }
            }
            jButton1.setIcon(new ImageIcon("smileyWin.png", "smily"));
            gameOver = true;
        }
    }
}
